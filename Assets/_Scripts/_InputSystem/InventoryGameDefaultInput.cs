//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Scripts/_InputSystem/InventoryGameDefaultInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InventoryGameDefaultInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InventoryGameDefaultInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InventoryGameDefaultInput"",
    ""maps"": [
        {
            ""name"": ""FPSPlayer"",
            ""id"": ""46f332e8-9f43-4ac9-b1a0-d2407706dd5b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a08ec55e-cf61-4468-bfd9-a92e9f6b6351"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ea848b00-d8ab-4be5-bcf2-304b763bec35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""821b2397-22b2-4a5a-89ef-a5a0afd86afe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenInventory"",
                    ""type"": ""Button"",
                    ""id"": ""44c2f4b3-9732-4aa5-ba08-02532a55a726"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""MovementAxis"",
                    ""id"": ""dc18bb14-cf4f-4db9-abcb-55d2f0b037c5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""25a60cfe-b383-4096-b741-13ca715adcac"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1bedd1ec-b3a3-46c1-8dfa-c3e67aee9cba"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5a4f9b40-b0c3-45db-8408-67a69d4d88ce"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c876e01d-cafb-4c14-b859-8377df0d0ed1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""99025818-7657-4e04-a923-34e5500db67d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17767ee2-5cdb-4a63-8b89-3696e35a3e11"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bcceed4f-acd5-437d-af57-5feccfc2b861"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FPSPlayer
        m_FPSPlayer = asset.FindActionMap("FPSPlayer", throwIfNotFound: true);
        m_FPSPlayer_Move = m_FPSPlayer.FindAction("Move", throwIfNotFound: true);
        m_FPSPlayer_Jump = m_FPSPlayer.FindAction("Jump", throwIfNotFound: true);
        m_FPSPlayer_Interact = m_FPSPlayer.FindAction("Interact", throwIfNotFound: true);
        m_FPSPlayer_OpenInventory = m_FPSPlayer.FindAction("OpenInventory", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FPSPlayer
    private readonly InputActionMap m_FPSPlayer;
    private List<IFPSPlayerActions> m_FPSPlayerActionsCallbackInterfaces = new List<IFPSPlayerActions>();
    private readonly InputAction m_FPSPlayer_Move;
    private readonly InputAction m_FPSPlayer_Jump;
    private readonly InputAction m_FPSPlayer_Interact;
    private readonly InputAction m_FPSPlayer_OpenInventory;
    public struct FPSPlayerActions
    {
        private @InventoryGameDefaultInput m_Wrapper;
        public FPSPlayerActions(@InventoryGameDefaultInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_FPSPlayer_Move;
        public InputAction @Jump => m_Wrapper.m_FPSPlayer_Jump;
        public InputAction @Interact => m_Wrapper.m_FPSPlayer_Interact;
        public InputAction @OpenInventory => m_Wrapper.m_FPSPlayer_OpenInventory;
        public InputActionMap Get() { return m_Wrapper.m_FPSPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FPSPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IFPSPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_FPSPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FPSPlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @OpenInventory.started += instance.OnOpenInventory;
            @OpenInventory.performed += instance.OnOpenInventory;
            @OpenInventory.canceled += instance.OnOpenInventory;
        }

        private void UnregisterCallbacks(IFPSPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @OpenInventory.started -= instance.OnOpenInventory;
            @OpenInventory.performed -= instance.OnOpenInventory;
            @OpenInventory.canceled -= instance.OnOpenInventory;
        }

        public void RemoveCallbacks(IFPSPlayerActions instance)
        {
            if (m_Wrapper.m_FPSPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFPSPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_FPSPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FPSPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FPSPlayerActions @FPSPlayer => new FPSPlayerActions(this);
    public interface IFPSPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnOpenInventory(InputAction.CallbackContext context);
    }
}
